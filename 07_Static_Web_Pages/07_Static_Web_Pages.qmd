---
title: "Session 7: Scraping Static Web Pages"
subtitle: "Introduction to Web Scraping and Data Management for Social Scientists"
author: "Johannes B. Gruber"
date: 2025-07-15
from: markdown+emoji
format:
  revealjs:
    smaller: true
    width: 1600
    height: 900
    scrollable: true
    code-line-numbers: true
    slide-number: c/t
    logo: ../ess_logo.png
    embed-resources: true
bibliography: ../references.bib
execute:
  eval: true
  cache: false
  echo: true
engine: knitr
highlight-style: nord
---

# Introduction
## This Course

<center>
```{r setup}
#| echo: false
#| message: false
library(tinytable)
library(tidyverse)
tibble::tribble(
  ~Day, ~Session,
  1,  "Introduction",
  2,  "Data Structures and Wrangling",
  3,  "Working with Files",
  4,  "Linking and joining data & SQL",
  5,  "Scaling, Reporting and Database Software",
  6,  "Introduction to the Web",
  7,  "Static Web Pages",
  8,  "Application Programming Interface (APIs) ",
  9,  "Interactive Web Pages",
  10, "Building a Reproducible Research Project",
) |> 
  tt() |> 
  style_tt() |> 
  style_tt(i = 7, background = "#FDE000")
```
</center>

## The Plan for Today

:::: {.columns}

::: {.column width="60%"}
In this session, we trap some **docile data** that wants to be found.
We will:

- Go over some parsing examples:
  - Wikipedia: World World Happiness Report
- Discuss some examples of good approaches to data wrangling
- Go into a bit more detail on requesting raw data
  
![Original Image Source: prowebscraper.com](media/web_scraping_steps.png)
:::

::: {.column width="40%" }
![](https://images.unsplash.com/photo-1534361960057-19889db9621e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1740&q=80)
[Joe Caione](https://unsplash.com/@joeyc) via unsplash.com
:::

::::


```{css}
#| echo: false

.datatables {
  font-size: smaller;
}

```

# Example: World Happiness Report
## Use your Browser to Scout

:::: {.columns}

::: {.column width="45%"}
[
  ![](media/en.wikipedia.org_wiki_World_Happiness_Report.png)
](https://en.wikipedia.org/w/index.php?title=World_Happiness_Report&oldid=1165407285)
![](media/en.wikipedia.org_wiki_World_Happiness_Report_table.png)
:::

::: {.column width="50%" }
![](media/en.wikipedia.org_wiki_World_Happiness_Report_code.png)
:::

::::

## Use your Browser's `Inspect` tool

![](media/inspect-view.png)

*Note: Might not be available on all browsers; use Chromium-based or Firefox.*

## Use `rvest` to scrape

:::: {.columns}

::: {.column width="45%"}
```{r}
library(rvest)
library(tidyverse)

# 1. Request & collect raw html
html <- read_html("https://en.wikipedia.org/w/index.php?title=World_Happiness_Report&oldid=1165407285")

# 2. Parse
happy_table <- html |> 
  html_elements(".wikitable") |> # select the right element
  html_table() |>                # special function for tables
  pluck(3)                       # select the third table

# 3. No wrangling necessary
happy_table
```
:::

::: {.column width="50%" }
```{r}
## Plot relationship wealth and life expectancy
ggplot(happy_table, aes(x = `GDP per capita`, y = `Healthy life expectancy`)) + 
  geom_point() + 
  geom_smooth(method = 'lm')
```

:::
::::

## Exercises 1

1. Get the table with 2023 opinion polling for the next United Kingdom general election from <https://en.wikipedia.org/w/index.php?title=Opinion_polling_for_the_2024_United_Kingdom_general_election&oldid=1232596394>
2. Wrangle and plot the data opinion polls

# Example: UK prime ministers on Wikipedia
## Use your Browser to Scout

[
  ![](media/list-pms.png)
](https://en.wikipedia.org/w/index.php?title=List_of_prime_ministers_of_the_United_Kingdom&oldid=1166167337)

## Use `rvest` to scrape

:::: {.columns}

::: {.column width="45%"}
```{r}
# 1. Request & collect raw html
html <- read_html("https://en.wikipedia.org/w/index.php?title=List_of_prime_ministers_of_the_United_Kingdom&oldid=1166167337") # I'm using an older version of the site since some just changed it

# 2. Parse
pm_table <- html |> 
  html_element(".wikitable:contains('List of prime ministers')") |>
  html_table() |> 
  as_tibble(.name_repair = "unique") |> 
  filter(!duplicated(`Prime ministerOffice(Lifespan)`))

# 3. No wrangling necessary
pm_table
```
:::

::: {.column width="50%" }

```
<td rowspan="4">
  <span class="anchor" id="18th_century"></span>
   <b>
     <a href="/wiki/Robert_Walpole" title="Robert Walpole">Robert Walpole</a>
   </b>
   <sup id="cite_ref-FOOTNOTEEccleshallWalker20021,_5EnglefieldSeatonWhite19951–5PrydeGreenwayPorterRoy199645–46_28-0" class="reference">
     <a href="#cite_note-FOOTNOTEEccleshallWalker20021,_5EnglefieldSeatonWhite19951–5PrydeGreenwayPorterRoy199645–46-28">[27]</a>
   </sup>
   <br>
   <span style="font-size:85%;">MP for <a href="/wiki/King%27s_Lynn_(UK_Parliament_constituency)" title="King's Lynn (UK Parliament constituency)">King's Lynn</a>
   <br>(1676–1745)
  </span>
</td>
```

```{r}
links <- html |> 
  html_elements(".wikitable:contains('List of prime ministers') b a") |>
  html_attr("href")
title <- html |> 
  html_elements(".wikitable:contains('List of prime ministers') b a") |>
  html_text()
tibble(name = title, link = links)
```

Note: these are relative links that need to be combined with *https://en.wikipedia.org/* to work
:::
::::


## Exercises 2

1. For extracting text, `rvest` has two functions: `html_text` and `html_text2`. Explain the difference. You can test your explanation with the example html below.

```{r}
html <- "<p>This is some text
         some more text</p><p>A new paragraph!</p>
         <p>Quick Question, is web scraping:

         a) fun
         b) tedious
         c) I'm not sure yet!</p>" |> 
  read_html()
```

2. How could you convert the `links` objects so that it contains actual URLs?
3. How could you add the links we extracted above to the `pm_table` to keep everything together?

# Example: thomann customer reviews
## Goal

:::: {.columns}
::: {.column width="50%"}
1. Collect all reviews from a given Amazon page
2. Identify and extract relevant variables for each review
:::
::: {.column width="50%" }
[![](media/thomann.png)](https://www.thomann.co.uk/Discovering-Statistics-Using-Andy-Field/dp/1446200469/){target="_blank"}
:::
::::

## Scout

After clicking on reviews, then "Read all reviews", these are the links to the first three pages:

1. https://www.thomann.co.uk/beyerdynamic_dt770_pro80_ohm_reviews.htm
2. https://www.thomann.co.uk/beyerdynamic_dt770_pro80_ohm_reviews.htm?order=&page=2&rating=0
3. https://www.thomann.co.uk/beyerdynamic_dt770_pro80_ohm_reviews.htm?order=&page=3&rating=0


## URLs explained

- Uniform Resource Locator (URL) is a key mechanisms used to identify resources on a website for retrieval

[![](https://media.geeksforgeeks.org/wp-content/uploads/20210625160610/urldiag.PNG)](https://www.geeksforgeeks.org/computer-networks/components-of-a-url/)

## Getting all URLs to product reviews

- We can spot two things:
  - there are 2715 reviews for this product (441 in English)
  - there are 45 pages with reviews
- (here you can get all reviews. E.g., Amazon limits results to 10 pages per query)

```{r}
pages <- 1:45
links <- paste0(
  "https://www.thomann.co.uk/beyerdynamic_dt770_pro80_ohm_reviews.htm", 
  "?page=", 
  pages,
  "&order=&page=2&rating=0"
)
links
```

## Collecting the reviews from 1 page

:::: {.columns}
::: {.column width="50%"}
```{r}
# make sure to read the HTML in only once
html <- read_html(links[1])

# we select review elements first
reviews <- html |> 
  html_elements(".customer-review")

# then extract the information from these reviews
star_ratings <- function(pct) {
  as.integer(pct) / 100 * 5
}
rating <- reviews |> 
  html_elements(".fx-rating-stars__filler") |> 
  html_attr("style") |> 
  str_extract("(?<=width: )\\d+?(?=%)") |> 
  star_ratings()

title <- reviews |> 
  html_elements(".review-intro__headline.js-headline-original") |> 
  html_text2()

date <- reviews |> 
  html_elements(".review-intro__author") |> 
  html_text2() |> 
  str_extract("\\d{2}.\\d{2}.\\d{4}") |> 
  lubridate::dmy()

text <- reviews |> 
  html_elements(".review-text .fx-text-collapsible__fallback") |> 
  html_text2()

tibble(date, rating, title, text)
```
:::
::: {.column width="50%" }
![](media/thomann-review.png)
:::
::::

## (Un)helpful reviews rating

:::: {.columns}
::: {.column width="50%"}
```{r}
helpful <- reviews |> 
  html_elements(".action [data-vote-rating-type=\"up\"] .action__value") |> 
  html_text2() |> 
  as.integer()
helpful
```

```{r}
unhelpful <- reviews |> 
  html_elements(".action [data-vote-rating-type=\"down\"] .action__value") |> 
  html_text2() |> 
  as.integer()
unhelpful
```

```{r}
tibble(date, rating, helpful, unhelpful, title, text)
```

:::
::: {.column width="50%" }
![](media/thomann-review.png)
:::
::::

## Make it safer: Iterate over cases, rather than variable values

- you can go over a nodeset and extract every matching value, then assemble results
- as soon as one element is missing in one of the nodesets, it errors
- safer: treat nodeset of reviews as list and iterate over each element

```{r}
#| output-location: column
check_len <- function(x, len = 1, .default = NA) {
  if (length(x) != len) {
    return(rep(.default, len))
  } else {
    return(x)
  }
}

parse_review <- function(r) {
  
  date <- r |> 
    html_elements(".review-intro__author") |> 
    html_text2() |> 
    str_extract("\\d{2}.\\d{2}.\\d{4}") |> 
    lubridate::dmy() |> 
    check_len()
  
  rating <- r |> 
    html_elements(".fx-rating-stars__filler") |> 
    html_attr("style") |> 
    str_extract("(?<=width: )\\d+?(?=%)") |> 
    star_ratings() |> 
    check_len()
  
  helpful <- r |> 
    html_elements(".action [data-vote-rating-type=\"up\"] .action__value") |> 
    html_text2() |> 
    as.integer() |> 
    check_len()
  
  unhelpful <- r |> 
    html_elements(".action [data-vote-rating-type=\"down\"] .action__value") |> 
    html_text2() |> 
    as.integer() |> 
    check_len()
  
  title <- r |> 
    html_elements(".review-intro__headline.js-headline-original") |> 
    html_text2() |> 
    check_len()
  
  text <- r |> 
    html_elements(".review-text .fx-text-collapsible__fallback") |> 
    html_text2() |> 
    check_len()
  
  tibble(date, rating, helpful, unhelpful, title, text)
}

map(reviews, parse_review) |> 
  bind_rows()
```

## Iterate over pages to collect all reviews

```{r thomann}
get_reviews_from_page <- function(link) {
  html <- read_html(link)
  
  reviews <- html |> 
    html_elements(".customer-review")
  
  map(reviews, parse_review) |> 
    bind_rows()
}

all_reviews <- map(links, get_reviews_from_page) |> 
  bind_rows()
glimpse(all_reviews)
```


## Exercises 3

We might be interested in product specific rating scales (sound, comfort, and quality)

1. Extract that information from the first review page (hint: it works similar to the star rating and you can reuse that function)
2. Each review has 3 feature ratings, extract the labels to those ratings and combine them with the ratings themselves into a data.frame
3. Add the variables sound, comfort, and quality to the `parse_review` function (hint: you will need `pivot_wider`)
4. Create `all_reviews` again, but with the feature ratings this time

# Example: Getting content from embedded json
## Goal

:::: {.columns}
::: {.column width="50%"}
1. Collect news articles from news.sky.com
2. Get the text of an article, the headline, date, and author
:::
::: {.column width="50%" }
[![](media/sky.png)](https://news.sky.com/story/crowdstrike-company-that-caused-global-techno-meltdown-offers-partners-10-vouchers-to-say-sorry-and-they-dont-work-13184488){target="_blank"}
:::
::::

## Scout

:::: {.columns}
::: {.column width="50%"}
Let's look for the date information in the page source
:::
::: {.column width="50%" }
![](media/sky-date.png)
:::
::::

## A Wild JSON string Appears!

- JavaScript Object Notation (json) is a way of storing complicated nested data in plain text (see session 3)
- data is put into a character string that indicates object types and relation of objects
- R knows how to read json strings/files and can easily process them

```{r}
library(jsonlite)
json_string <- list(x = 1:10, y = list(z = 1:10, a = LETTERS[1:10])) |> 
  toJSON()
json_string
```

```{r}
fromJSON(json_string)
```

- essentially we seem to get pre-packaged data here

## Obtain the JSON string

```{r}
# 1. Request & collect raw html
html <- read_html("https://news.sky.com/story/crowdstrike-company-that-caused-global-techno-meltdown-offers-partners-10-vouchers-to-say-sorry-and-they-dont-work-13184488")

# 2. Parse
json_string <- html |> 
  rvest::html_element("[type=\"application/ld+json\"]") |>
  rvest::html_text() 

# 3. wrangling (part 1)
data <- jsonlite::fromJSON(json_string)
```

## Wrangling part 2

From here it is really straightforward to extract (most of) the relevant information:

```{r}
# datetime
datetime <- pluck(data, "datePublished") |>
  lubridate::as_datetime()

# headline
headline <- pluck(data, "headline")

# author
author <- pluck(data, "name")
```

The only thing missing from this data is the article itself...

## Getting the article

```{r}
text <- html |>
  rvest::html_elements(".sdc-article-body p") |>
  rvest::html_text2() |>
  paste(collapse = "\n")
```

```{r}
sky_article <- tibble(datetime, author, headline, text)
glimpse(sky_article)
```

## Exercises 4

1. Get the author, publication datetime, headline and text from this site: <https://www.cnet.com/tech/services-and-software/facebook-hopes-to-normalize-idea-of-data-scraping-leaks-says-leaked-internal-memo/> (hint: it works in a very similar way, but you have to apply one extra data wrangling step)


# Example: zeit.de
## Special Requests: Behind Paywall

Let's get this [cool data journalism article](https://www.zeit.de/mobilitaet/2024-04/deutschlandticket-klimaschutz-oeffentliche-verkehrsmittel-autos-verkehrswende).

```{r}
html <- read_html("https://www.zeit.de/mobilitaet/2024-04/deutschlandticket-klimaschutz-oeffentliche-verkehrsmittel-autos-verkehrswende")
html |> 
  html_elements(".article-body p") |> 
  html_text2()
```

:::{.fragment}
:thinking: Wait, that's only the first two paragraphs!
:::

::: {.fragment .callout-tip}
Websites use cookies to remember users (including logged in ones)
:::

## What are browser cookies

- Small pieces of data stored on the user's device by the web browser while browsing websites
- **Purpose**:
  - **Session Management**: Maintain user sessions by storing login information and keeping users logged in as they navigate a website.
  - **Personalization**: Save user preferences, such as language settings or theme choices, to enhance user experience.
  - **Tracking and Analytics**: Track user behavior across websites for analytics and targeted advertising.
- We can use them in scraping:
  - to get content from websites that require consent before giving access
  - to authenticate as a user with content access privileges
  - to access personalized content
  - to simulate real user behavior, reducing the chances of getting blocked by websites with anti-scraping measures
- You can use browser extensions like [“Get
cookies.txt”](https://chrome.google.com/webstore/detail/get-cookiestxt-locally/cclelndahbckbenkjhflpdbgdldlbecc) for Chromium-based browsers or
[“cookies.txt”](https://addons.mozilla.org/en-US/firefox/addon/cookies-txt/) for Firefox to save your cookies to a file
- Implications:
  - You need to keep cookies secure as they can authenticate others as you!

## Special Requests: ~~Behind Paywall~~ Cookies!

```{r}
#| eval: false
library(cookiemonster)
add_cookies("cookies.txt")
```

```{r}
#| eval: false
library(httr2)
html <- request("https://www.zeit.de/mobilitaet/2024-04/deutschlandticket-klimaschutz-oeffentliche-verkehrsmittel-autos-verkehrswende") |> # start a request
  req_options(cookie = get_cookies("zeit.de", as = "string")) |> # add cookies to be sent with it
  req_perform() |> 
  resp_body_html() # extract html from response

text <- html |> 
  html_elements(".article-body p") |> 
  html_text2()
length(text)
```


# Example: South African Parliament (a special case)
## Goal

:::: {.columns}
::: {.column width="50%"}
1. Collect information about any financial interest of South Africa's Members of Parliament 
:::
::: {.column width="50%" }
[![](media/za.png)](https://www.parliament.gov.za/register-members-Interests){target="_blank"}
:::
::::

## Collect links to PDF


```{r}
library(httr2)
# I use the internet archive here as the real website is incredibly slow
html <- request("https://web.archive.org/web/20240519142346/https://www.parliament.gov.za/register-members-Interests") |> 
  req_timeout(100) |> 
  req_perform() |> 
  resp_body_html()

links <- html |> 
  html_elements(".parly-h2+ul a") |> 
  html_attr("href") |> 
  # some links are malformed
  str_remove("^/web/20240519142346/")

years <- html |> 
  html_elements(".parly-h2+ul a") |> 
  html_text()

interest_pdfs <- tibble(
  link = links, year = years
) |> 
  mutate(file_name = paste0("data/za/", year, ".pdf"))
interest_pdfs
```

## Download files for processing

```{r}
dir.create("data/za", showWarnings = FALSE)
if (!file.exists("data/za/2018.pdf")) {
  # multi_download is a neat little function that parallesises file download
  curl::multi_download(
    urls = interest_pdfs$link, 
    destfiles = interest_pdfs$file_name
  )
}
```


## Scraping data from PDFs?

:::: {.columns}

::: {.column width="45%"}
- Data inside a PDF is actually not such an uncommon case
- Many institutions share PDFs with tables, images and lists of data
- We can use some of our new pattern finding skills to scrape data from these PDFs as well though
  - Session names seem to be in a larger font and bold
  - Paper titles are in italics
  - Authors are either bold or plain font
:::

::: {.column width="50%"}
![](media/pdf.png)
:::

::::

## Let's investigate the PDF a little

```{r}
library(pdftools)
interests_pdf <- pdf_data("data/za/2018.pdf", font_info = TRUE)
glimpse(interests_pdf[[2]])
```

We see here that:

- each page is an element in a list
- each word is in one row of the table
- it contains the font_size and font_name
- the position of each word on tha page is given with x and y coordinates

## Let's investigate the PDF a little


Let's investigate a few words we saw above:

```{r}
# a politician name
interests_pdf[[2]] |> 
  filter(str_detect(text, "Abrahams,"))

# an item header
interests_pdf[[2]] |> 
  filter(str_detect(text, "1"))

# a disclose
interests_pdf[[2]] |> 
  filter(str_detect(text, "disclose"))

# a word inside table
interests_pdf[[2]] |> 
  filter(str_detect(text, "Pringle"))

# a table header
interests_pdf[[2]] |> 
  filter(str_detect(text, "Description"))
```


:::{.fragment}
Findings:

- It looks like we can say relatively easily where a new politician entry starts based on the font
- The item header has the same font name, but a different size
- We can tell quite easily on which items there is nothing to disclose
- The table colnames are similar to item headers, but start at a different x location
:::

## Test extract info from one page

```{r}
p1 <- interests_pdf[[2]]
```

```{r}
# add whether politician name
p1 |> 
  mutate(is_name = font_name == "Arial-BoldMT" & 
           round(font_size, 3) == 8.775) |> 
  # add whether header
  mutate(is_header = font_name == "Arial-BoldMT" & 
           round(font_size, 1) == 7.5)
```

## Wrangle into shape

```{r}
p1_df <- p1 |> 
  # one line in the PDF is all on the same y position
  group_by(y) |> 
  # so we can summarise, ie. make one row out of one line
  summarise(
    # we retain only the first value from font_name, font_size and x
    # since they are all the same anyway
    font_name = head(font_name, 1),
    font_size = head(font_size, 1),
    x = head(x, 1),
    # we use paste with collapse to get several character values into
    # one string per line
    text = paste(text, collapse = " "), 
    # dropping groups as we don't need them
    .groups = "drop"
  ) |> 
  # we check whether a line is a name
  mutate(is_name = font_name == "Arial-BoldMT" & 
           round(font_size, 3) == 8.775) |> 
  # and add a unique ID per person
  mutate(id = cumsum(is_name)) |> 
  # now we do the same per disclosure item
  mutate(is_header = font_name == "Arial-BoldMT" & 
           round(font_size, 1) == 7.5 &
           x < 50) |> 
  mutate(item_id = cumsum(is_header))
```

## Wrangle into shape

```{r}
p1_df_tidy <- p1_df |> 
  # we group by person
  group_by(id) |> 
  # and add a new variable with their name
  mutate(
    name = text[is_name],
  ) |> 
  ungroup() |> 
  # now we can remove the rows that contain the name in the text
  filter(!is_name) |> 
  # we do the same per item
  group_by(item_id) |> 
  mutate(
    item = text[is_header],
    content = paste(text[!is_header], collapse = "\n")
  ) |> 
  # this produces a lot of duplicates, which we can get rid of with distinct
  distinct(name, item, content)
glimpse(p1_df_tidy)
```

## Apply to whole PDF

First, we have to add a page number to each site:

```{r}
for (p in seq_along(interests_pdf)) {
  interests_pdf[[p]]$page <- p
}
```

## Apply to whole PDF

I'm sorry for this long code :sweat_smile:

```{r}
interests_df <- bind_rows(interests_pdf) |> 
  # one line in the PDF is all on the same y position
  group_by(page, y) |> 
  # so we can summarise, ie. make one row out of one line
  summarise(
    # we retain only the first value from font_name, font_size and x
    # since they are all the same anyway
    font_name = head(font_name, 1),
    font_size = head(font_size, 1),
    x = head(x, 1),
    # we use paste with collapse to get several character values into
    # one string per line
    text = paste(text, collapse = " "), 
    # dropping groups as we don't need them
    .groups = "drop"
  ) |> 
  # we check whether a line is a name
  mutate(is_name = font_name == "Arial-BoldMT" & 
           round(font_size, 3) == 8.775) |> 
  # and add a unique ID per person
  mutate(id = cumsum(is_name)) |> 
  # everything before the first name can be removed
  filter(id != 0) |> 
  # now we do the same per disclosure item
  mutate(is_header = font_name == "Arial-BoldMT" & 
           round(font_size, 1) == 7.5 &
           x < 50) |> 
  mutate(item_id = cumsum(is_header))  |> 
  # we group by person
  group_by(id) |> 
  # and add a new variable with their name
  mutate(
    name = text[is_name],
  ) |> 
  ungroup() |> 
  # now we can remove the rows that contain the name in the text
  filter(!is_name) |> 
  # we do the same per item
  group_by(item_id) |> 
  mutate(
    item = text[is_header],
    content = paste(text[!is_header], collapse = "\n")
  ) |> 
  # this produces a lot of duplicates, which we can get rid of with distinct
  ungroup() |> 
  distinct(id, name, item, content)
```



## Exercises 5

First, review the material. What you should take from this section:

- websites might contain files containing the data you are interested in. Scraping the links and then downloading the files is a quick way to get access
- It is possible to extract data from PDFs, but not trivial
- The package `pdftools` has a `pdf_data` function which gives you much more flexibility to extract information systematically than `pdf_text`

That said, you can practice working with PDFs a litte

1. In the folder /data (relative to this document) there is a PDF with some text. Read it into R
2. The PDF has two columns, parse the left column of the first page into one object and the right into another
3. Now combine them and bring the text in the right order as a human would read it

Bonus:

4. Let's assume you wanted to have this text in a table with one column indicating the section and one having the text of the section
5. Now let's assume you wanted to parse this on the paragraph level instead (hint: remember `str_split`)


# Optional Homework

You have seen some tools and tricks to scrape websites now.
But your best ally in web scraping is **experience**!
Now your task is to **find a page on Wikipedia you find interesting and scrape content** from there.
Even if you don't fully succeed, document the steps you take and note down where the information can be found.
If you want to try to get some data you actually need from a different website, your're also welcome!
But note that if you collect raw html in R and the data is not where it should be (e.g., the html elements containing panel names do not exist), you might have discovered a more advanced site, which we will cover later. 
Note that down and try another website.

Deadline: **Friday before class**


# Reminder: Social Programme

```{r}
#| echo: false
tibble::tribble(
  ~DATE,               ~Event,                                  ~Time,           ~Venue,
  "MONDAY 7 July",     "Meet and Greet - in person",            "19:00 start",   "SU Bar",
  "TUESDAY 8 July",    "Climbing",               "18:30 start",   "Sports Centre",
  "WEDNESDAY 9 July",  "Harold Clarke Speaker Series - hybrid", "18:45 - 20.00", "EBS",
  "THURSDAY 10 July",  "Sports Night",                          "18:30 - 20:30", "Sports Centre",
  "FRIDAY 11 July",    "Wivenhoe Pub Run",                      "18:30 start",   "Wivenhoe pubs",
  "MONDAY 14 JULY",    "SU bar Quiz",                           "19:00 start",   "SU Bar",
  "TUESDAY 15 JULY",   "Sports Night",                          "18:30 - 20:30", "Sports Centre",
  "WEDNESDAY 16 JULY", "Harold Clarke Speaker Series - hybrid", "18:30",         "EBS",
  "THURSDAY 17 JULY",  "Farewell Party Karaoke",                "20:30 - 23:30", "SU Bar"
) |> 
  tt() |> 
  style_tt(fontsize = 0.9) |> 
  style_tt(i = 7, background = "#FDE000")
```

# Wrap Up

Save some information about the session for reproducibility.

```{r}
#| code-fold: true
#| code-summary: "Show Session Info"
sessionInfo()
```

<!-- This is just some extra CSS code to make presentation look pretty -->
```{css}
#| echo: false
.table-striped {
  > tbody > tr:nth-of-type(odd) > * {
    background-color: #fff9ce;
  }
}
.table-hover {
  > tbody > tr:hover > * {
    background-color: #ffe99e; /* Adjust this color as needed */
  }
}
.reveal section img { 
    background: rgba(255, 255, 255, 0.12); 
    border: 4px solid #eeeeee;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.15) 
}

.reveal code {
  max-height: 100% !important;
}
```
