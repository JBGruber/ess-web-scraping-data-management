---
title: "Session 6: Introduction to the Web"
subtitle: "Introduction to Web Scraping and Data Management for Social Scientists"
author: "Johannes B. Gruber"
date: 2025-07-14
from: markdown+emoji
format:
  revealjs:
    smaller: true
    width: 1600
    height: 900
    scrollable: true
    code-line-numbers: true
    slide-number: c/t
    logo: ../ess_logo.png
    embed-resources: true
bibliography: ../references.bib
execute:
  cache: true
  echo: true
engine: knitr
highlight-style: nord
---

# Introduction
## This Course

<center>
```{r setup}
#| echo: false
#| message: false
library(tinytable)
library(tidyverse)
tibble::tribble(
  ~Day, ~Session,
  1,  "Introduction",
  2,  "Data Structures and Wrangling",
  3,  "Working with Files",
  4,  "Linking and joining data & SQL",
  5,  "Scaling, Reporting and Database Software",
  6,  "Introduction to the Web",
  7,  "Static Web Pages",
  8,  "Application Programming Interface (APIs) ",
  9,  "Interactive Web Pages",
  10, "Building a Reproducible Research Project",
) |> 
  tt() |> 
  style_tt() |> 
  style_tt(i = 6, background = "#FDE000")
```
</center>

## The Plan for Today

:::: {.columns}

::: {.column width="60%"}
In this session, we learn how to **scout** data in the wild.
We will:

- discuss web scraping from a theoretical point of view:
  - What is web scraping?
  - Why should you learn it?
  - What legal and ethical implications should you keep in mind?
- learn a bit more about how the Internet works
  - What is HTML
  - What is CSS
:::

::: {.column width="40%" }
![](https://images.unsplash.com/photo-1585615711517-b22136b2019f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1548&q=80)
[Angie Gade](https://unsplash.com/@angiefeelstherush) via unsplash.com
:::

::::


# What is Web Scraping
## Forms to get data from the web

:::: {.columns}

::: {.column width="50%"}
- Download data from a website
- Retrieve data via an API
- Scrape the (unstructured) Data

:::{.fragment}
![](media/web-mining.png)
:::
:::

::: {.column width="50%"}
![](media/dataset.png)
![Image Source: daveberesford.co.uk](https://daveberesford.co.uk/wp-content/uploads/2019/02/data-scraping-960x594.png)
:::
::::



## Web Scraping

:::: {.columns}

::: {.column width="70%" .incremental}
- Used when other means are unavailable
- Scrape the (unstructured) Data from a website
  - E.g: get the author, title, date and body of an online news article
  - E.g: get a table from a website (like Wikipedia)
  - E.g: get all entries from a blog
  - E.g: get all press statements from a political party website
  - E.g: get all hyperlinks to files on a website
- A web-scraper is a program (or robot) that:
  - goes to a web page
  - downloads its content
  - extracts data from the content
  - then saves the data to a file or a database
:::

::: {.column width="30%"}

![](media/raw-html.jpg)

:::
::::

## Web Scraping: A Three-Step Process

1. Send an HTTP request to the webpage -> server responds to the request by returning HTML content
2. Parse the HTML content -> extract the information you want from the nested structure of HTML code
3. Wrangle the data into a useful format

![Original Image Source: prowebscraper.com](media/web_scraping_steps.png)

## Hurdles

:::: {.columns}

::: {.column width="40%" .incremental}
- Unfortunately no one-size-fits-all solution
  - Lots of different techniques, tools, tricks
  - Websites change (some more frequently than others)
- Some web pages are easier to scrape than others (by accident or on purpose!):

1. Well behaved static HTML with recurring patterns
2. Haphazard HTML not clearly differentiating between different types of information
3. Interactive web sites loading content by executing code (usually JavaScript or PHP)
4. Interactive web sites with mechanisms against data extraction (rate limits, captchas etc.)
5. Collecting raw data might be limited, data wrangling might be made difficult
:::

::: {.column width="60%"}
![](https://hackernoon.com/hn-images/0*MPt2rectMhwklT63.jpg)
:::
::::

## Why Should You Learn Web Scraping?

:::: {.columns}

::: {.column width="60%"}
- The internet is a data gold mine!
- Data was not created for research, but are often traces of what people are *actually* doing on the internet
- Reproducible and renewable data collection (e.g., rehydrate data that is copyrighted)
- Web Scraping let's you automate data retrieval (as opposed to using tedious copy & past on some web site)
- It's one of the most fun tasks to learn R and programming!
  - It's engaging and satisfying to find repeating patterns that you can employ to structure data (every website becomes a little puzzle)
  - It touches on many important computational skills
  - The return is good data to further your career (unlike sudokus or video games)
:::

::: {.column width="40%"}
![](media/treasure.jpg)
:::
::::

## Found vs Designed Data

:::: {.columns}

::: {.column width="50%"}
### Designed Data

- Collected for research
- Full control of shape and form
- Problems of validity due to social desirability and imperfect estimation problems
:::

::: {.column width="50%" }
### Found Data

- Traces of human behavior
- Comes in all shapes and forms
- Problems of validity as not representative and incomplete access
:::

::::

# Implications of Web Scraping
## Legal

Web Scraping is not a shady or illegal activity, **but** not all web scraping is unproblematic and the **data** does not become **yours**.

::: {.incremental}
- Collecting **personal data** of people in the EU might violate GDPR (General Data Protection Regulation)
  - The GDPR defines personal data as "any information relating to an identified or identifiable natural person." (Art. 4 [GDPR](https://gdpr-info.eu/art-4-gdpr/))
  - Exceptions
    - if you get consent from the people whose data it is
    - personal data processing is legitimate when "necessary for the performance of a task carried out in the public interest" (Art. 6 [GDPR](https://gdpr-info.eu/art-6-gdpr/))
- Collecting **copyrighted** data
  - Complicated legal situation
  - Public facing content is probably okay ([9th circuit ruling](https://www.vice.com/en/article/9kek83/linkedin-data-scraping-lawsuit-shot-down), [DAS Article 40](https://www.eu-digital-services-act.com/Digital_Services_Act_Article_40.html))
  - You will probably get in trouble if you distribute the material
  - "there have been no lawsuits in [...] major western democratic countries stemming from a researcher scraping publicly accessible data from a website for personal or academic use." [@luscombewebscraping2022]
- Honouring Terms of Service and robots.txt
  - Many companies have ToS that might prohibit you from scraping (these are not laws, might not be binding and whether they can be enforced is a separate question)
  - /robots.txt is often where guidelines are communicated to automated crawlers (these are not legally binding either)
:::

## ToS and Robots.txt

![](media/twitter.com_en_tos.png)

[Twitter ToS](https://twitter.com/en/tos#intlTerms)

```html
User-agent: *                         # the rules apply to all user agents
Disallow: /EPiServer/CMS/             # do not crawl any URLs that start with /EPiServer/CMS/
Disallow: /Util/                      # do not crawl any URLs that start with /Util/ 
Disallow: /about/art-in-parliament/   # do not crawl any URLs that start with /about/art-in-parliament/
```
<https://www.parliament.uk/robots.txt>


## Ethical

- Are there other means available to get to the data (e.g., via an API)?
- `robots.txt` might not be legally binding, but it is not nice to ignore it
- Scraping can put a heavy load on website (if you make 1000s of requests) which costs the hosts money and might bring down a site ([DDoS attack](https://en.wikipedia.org/wiki/Denial-of-service_attack))
- Think twice before scraping personal data. You should ask yourself:
  - is it necessary for your research?
  - are you harming anyone by obtaining (or distributing) the data?
  - do you really need everything or are parts of the data sufficient (e.g., can you preselect cases or ignore variables)

## Advice?

Legal and ethical advice is rare and complicated to give.
A good *opinion* piece about it is @freelonAPI2018.
It is worth reading, but can be summarised in three general pieces of advice

- Use authorized methods whenever possible
- Do not confuse terms of service compliance with data protection
- Understand the risks of violating terms of service

## Exercises 1

Twitter recently made access to their API punishingly expensive and stopped free academic access for research.
If you wanted to do research on Twitter data through web-scraping anyway what implications would that have:

1. Legally

2. Ethically

3. Practical


# What are HTML and CSS
## What is HTML
- HTML (HyperText Markup Language) is the standard markup language for documents designed to be displayed in a web browser
- Contains the raw data (text, URLs to pictures and videos) plus defines the layout and some of the styling of text

![](media/html_element.svg)

Image Source: [Wikipedia.org](https://en.wikipedia.org/wiki/HTML_element)

## Example: Simple

:::: {.columns}

::: {.column width="50%"}
Code:

```html
<!DOCTYPE html>
<html>
<head>
    <title>My Simple HTML Page</title>
</head>
<body>
    <p>This is the body of the text.</p>
</body>
</html>
```
:::

::: {.column width="50%"}
Browser View:

![](media/html-1.png)
:::
::::

## Example: With headline and author

:::: {.columns}
::: {.column width="50%"}
Code:

```html
<!DOCTYPE html>
<html>
<head>
    <title>My Simple HTML Page</title>
</head>
<body>
    <h1>My Headline</h1>
    <p class="author" href="https://www.johannesbgruber.eu/">Me</p>
    <p>This is the body of the text.</p>
</body>
</html>
```
:::

::: {.column width="50%"}
Browser View:

![](media/html-2.png)
:::
::::

## Example: With some data

:::: {.columns}
::: {.column width="50%" height="50%"}
Code:

```{html}
<!DOCTYPE html>
<html>
<head>
    <title>My Simple HTML Page</title>
</head>
<body>
    <h1>My Headline</h1>
    <p class="author">Me</p>
    <p>This is the body of the text.</p>
    <p>Consider this data:</p>
    <table>
        <tr>
            <th>Name</th>
            <th>Age</th>
        </tr>
        <tr>
            <td>John</td>
            <td>25</td>
        </tr>
        <tr>
            <td>Mary</td>
            <td>26</td>
        </tr>
    </table>
</body>
</html>
```
:::

::: {.column width="50%"}
Browser View:

![](media/html-3.png)
:::
::::

## Example: With an image

:::: {.columns}
::: {.column width="50%"}
Code:

```html
<!DOCTYPE html>
<html>
<head>
    <title>My Simple HTML Page</title>
</head>
<body>
    <h1>My Headline</h1>
    <p class="author">Me</p>
    <p>This is the body of the text.</p>
    <p>Consider this image:</p>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/About_The_Dog.jpg/640px-About_The_Dog.jpg" alt="About The Dog.">
</body>
</html>
```
:::

::: {.column width="50%"}
Browser View:

![](media/html-4.png)
:::
::::

## Example: With a link

:::: {.columns}
::: {.column width="50%"}
Code:

```html
<!DOCTYPE html>
<html>
<head>
    <title>My Simple HTML Page</title>
</head>
<body>
    <h1>My Headline</h1>
    <a href="https://www.johannesbgruber.eu/">
      <p class="author">Me</p>
    </a>
    <p>This is the body of the text.</p>
</body>
</html>
```
:::

::: {.column width="50%"}
Browser View:

![](media/html-4.png)
:::
::::

## What is CSS

- CSS (Cascading Style Sheets) is very often used in addition to HTML to control the presentation of a document
- Designed to enable the separation of *content* from things concerning the *look*, such as layout, colours, and fonts.
- The reason it is interesting for web scraping is that **certain information often get the same styling**

## Example: CSS

:::: {.columns}
::: {.column width="50%"}
HTML:

```html
<!DOCTYPE html>
<html>
<head>
    <title>My Simple HTML Page</title>
    <link rel="stylesheet" type="text/css" href="example.css">
</head>
<body>
  <h1 class="headline">My Headline</h1>
  <p class="author">Me</p>
  <div class="content">
    <p>This is the body of the text.</p>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/About_The_Dog.jpg/640px-About_The_Dog.jpg" alt="About The Dog.">
    <p>Consider this data:</p>
    <table>
      <tr class="top-row">
          <th>Name</th>
          <th>Age</th>
      </tr>
      <tr>
          <td>John</td>
          <td>25</td>
      </tr>
      <tr>
          <td>Mary</td>
          <td>26</td>
      </tr>
    </table>
  </div>
</body>
</body>
</html>

```

CSS:

```css
/* CSS file */

.headline {
  color: red;
}

.author {
  color: grey;
  font-style: italic;
  font-weight: bold;
}

.top-row {
  background-color: lightgrey;
}

.content img {
  border: 2px solid black;
}

table, th, td {
  border: 1px solid black;
}
```
:::

::: {.column width="50%"}
Browser View:

![](media/css.png)
:::
::::

## Exercises 2

1. Add another image and another paragraph to `data/example.html` and display it in your browser
2. Add a second level headline to the page
3. Add another image to the page
4. Manipulate the files `data/example.html` and/or `data/example.css` so that "content" is displayed in italics

# HTMl and CSS in Web Scraping: a preview
## Using HTML tags:

You can select HTML elements by their tags

```{r}
library(rvest)
read_html("data/example.html") |> 
  html_elements("p") |> 
  html_text2()
```

- to select them, **tags** are written without the `<>`
- in theory, arbitrary tags are possible, but commonly people use `<p>` (paragraph), `<br>` (line break), `<h1>`, `<h2>`, `<h3>`, ... (first, second, third, ... level headline), `<b>` (bold), `<i>` (italic), `<img>` (image), `<a>` (hyperlink), and a couple more.

## Using attributes

You can select elements by an attribute, including the class:

```{r}
read_html("data/example.html") |> 
  html_element("[class=\"headline\"]") |> 
  html_text()
```

For `class`, there is also a shorthand:

```{r}
read_html("data/example.html") |> 
  html_element(".headline") |> 
  html_text()
```

Another important shorthand is `#`, which selects the `id` attribute:

```{r}
read_html("data/example.html") |> 
  html_element("#table-1") |> 
  html_table()

read_html("data/example.html") %>% 
  html_element("#table-1 > tr")

```

## Extracting attributes

Instead of selecting by arrtibute, you can also extract one or all attributes:

```{r}
read_html("data/example.html") |> 
  html_elements("a") |> 
  html_attr("href")
```

```{r}
read_html("data/example.html") |> 
  html_elements("a") |> 
  html_attrs()
```

## Chaining selectors

If there is more than one element that fits your selector, but you only want one of them, see if you can make your selection more specific by chaining selectors with `>` (for the immediate next one) or an empty space (for any children of an element):

```{r}
read_html("data/example.html") |> 
  html_elements(".author>a") |> 
  html_attr("href")
```

```{r}
read_html("data/example.html") |> 
  html_elements(".author a") |> 
  html_attr("href")
```

Tip: there is also no rule against doing this instead:

```{r}
read_html("data/example.html") |> 
  html_elements(".author") |> 
  html_elements("a") |> 
  html_attr("href")
```

## Common Selectors

There are quite a lot of [CSS selectors](https://www.w3schools.com/cssref/css_selectors.asp), but often you can stick to just a few:

| selector        | example           | Selects                                                    |
|-----------------|-------------------|------------------------------------------------------------|
| element/tag     | `table`           | **all** `<table>` elements                                 |
| class           | `.someTable`      | **all** elements with `class="someTable"`                  |
| id              | `#table-1`        | **unique** element with `id="table-1"`                     |
| element.class   | `tr.headerRow`    | **all** `<tr>` elements with the `headerRow` class         |
| class1.class2   | `.someTable.blue` | **all** elements with the `someTable` AND `blue` class     |
| element,element | `tr,p`            | **all** `<tr>` elements AND **all** `<pr>` elements        |
| class1 tag      | `.table-1 tr`     | **all** `<tr>` elements that are descendants of `.table-1` |
| class1 > tag    | `.table-1 > tr`   | **all** `<tr>` elements that with `.table-1` as parent     |
| class1 + tag    | `.table-1 + a`   | the `<a>` element directly following an element `.table-1`  |

## Family Relations

Each html tag can contain other tags.
To keep track of the relations we speak of ancestors, descendants, parents, children and siblings.

```{html}
#| linecode-line-numbers: true
#| code-line-numbers: "1-26|2-14|3-10"
<book>
  <chapter>
    <section>
      <subsection>
        This is a subsection.
      </subsection>
      <subsection>
        This is another subsection.
      </subsection>
    </section>
    <section>
      This is a section.
    </section>
  </chapter>
  <chapter>
    <section>
      This is a section.
    </section>
    <section>
      This is a section.
    </section>
  </chapter>
  <chapter>
    This is a chapter without sections.
  </chapter>
</book>
```


## Exercises 3

1. Practice finding the right selector with the CSS Diner game: <https://flukeout.github.io/>
2. Consider the toy HTML example below. Which selectors do you need to put into `html_elements()` (which extracts all elements matching the selector) to extract the information


```{r}
#| eval: false
library(rvest)
webpage <- "<html>
<body>
  <h1>Computational Research in the Post-API Age</h1>
  <div class='author'>Deen Freelon</div>
  <div>Keywords:
    <ul>
      <li>API</li>
      <li>computational</li>
      <li>Facebook</li>
    </ul>
  </div>
  <div class='text'>
    <p>Three pieces of advice on whether and how to scrape from Dan Freelon</p>
  </div>
  
  <ol class='advice'>
    <li id='one'> use authorized methods whenever possible </li>
    <li id='two'> do not confuse terms of service compliance with data protection </li>
    <li id='three'> understand the risks of violating terms of service </li>
  </ol>

</body>
</html>" |> 
  read_html()
```

```{r}
#| eval: false
# the headline
headline <- html_elements(webpage, "")
headline
# the author
author <- html_elements(webpage, "")
author
# the ordered list
ordered_list <- html_elements(webpage, "")
ordered_list
# all bullet points
bullet_points <- html_elements(webpage, "")
bullet_points
# bullet points in unordered list
bullet_points_unordered <- html_elements(webpage, "")
bullet_points_unordered
# elements in ordered list
bullet_points_ordered <- html_elements(webpage, "")
bullet_points_ordered
# third bullet point in ordered list
bullet_point_three_ordered <- html_elements(webpage, "")
bullet_point_three_ordered
```


# Wrap Up

Save some information about the session for reproducibility.

```{r}
#| code-fold: true
#| code-summary: "Show Session Info"
sessionInfo()
```

# References
